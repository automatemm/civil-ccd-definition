#!groovy

properties([
  parameters([
    string(name: 'CIVIL_SERVICE_PR', defaultValue: '123',
      description: 'PR number on civil-service repo'),
    string(name: 'CIVIL_CCD_DEFINITION_PR', defaultValue: '123',
      description: 'PR number on civil-ccd-definition repo'),
    string(name: 'CIVIL_CAMUNDA_BPMN_DEFINITION_PR', defaultValue: '123',
      description: 'PR number on civil-camunda-bpmn-definition repo'),
    string(name: 'PREVIEW_URL', defaultValue: 'civil-ccd-pr-000.service.core-compute-preview.internal',
      description: 'Preview URL where orchestrated environment should be deployed (SERVICE_FQDN)'),
    string(name: 'PREVIEW_SERVICE_NAME', defaultValue: 'civil-ccd-pr-000',
      description: 'Preview service name used for releaseNameOverride (SERVICE_NAME)'),
  ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig

def type = "java"
def product = "civil"
def component = "ccd"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

def createGithubRelease() {
  sh """
    ./bin/create-github-release.sh
  """
}

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    sh "./build-release-ccd-definition.sh ${env}"
  }

  dir("${WORKSPACE}/build") {
    steps.archiveArtifacts artifacts: "ccd-release-config/civil-ccd-${env}.xlsx"
  }
}

def uploadCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin"){
    ccdDefinitionFilePath="${WORKSPACE}/build/ccd-release-config/civil-ccd-${env}.xlsx"
    sh """
      eval \$(./variables/load-${env}-environment-variables.sh)
      ${WORKSPACE}/bin/utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
    """
  }
}

withPipeline(type, product, component) {
  env.CIVIL_SERVICE_PR = params.CIVIL_SERVICE_PR
  env.CIVIL_CCD_DEFINITION_PR=params.CIVIL_CCD_DEFINITION_PR
  env.CIVIL_CAMUNDA_BPMN_DEFINITION_PR=params.CIVIL_CAMUNDA_BPMN_DEFINITION_PR
  env.PREVIEW_ENVIRONMENT_URL=params.PREVIEW_ENVIRONMENT_URL
  env.PREVIEW_SERVICE_NAME=params.PREVIEW_SERVICE_NAME

  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#civil_notifications')

  onPR {
    loadVaultSecrets(secrets)
  }
  onMaster {
    loadVaultSecrets(secrets)
  }
  onDemo {
    loadVaultSecrets(secrets)
  }

  after('checkout') {
    onDemo {
      def subscription = 'nonprod'
      withSubscription(subscription) {
        withTeamSecrets(pipelineConf, 'demo') {
          archiveCoreCaseDataDefinitions('demo')
          uploadCoreCaseDataDefinitions('demo')
        }
      }
    }

    onPR {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        try {
          sh '''
          set -e

          git fetch origin pull/${CIVIL_CCD_DEFINITION_PR}/head:civil-ccd-pr-branch
          git checkout civil-ccd-pr-branch
        '''
        } catch (err) {
          notifyBuildEvent channel: '#civil_notification', color: 'warning', message: 'Failed to orchestrate civil-ccd-definition branch'
        }
      }
    }
  }

  before('smoketest:preview') {
    withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
      try {
        sh '''
          set -e

          git remote add civil-camunda https://github.com/hmcts/civil-camunda-bpmn-definition
          git fetch civil-camunda pull/${CIVIL_CAMUNDA_BPMN_DEFINITION_PR}/head:civil-camunda-pr-branch
          git checkout civil-camunda-pr-branch -- src/main/resources/camunda
          mv src/main/resources/camunda camunda
        '''
      } catch (err) {
        notifyBuildEvent channel: '#civil_notification', color: 'warning', message: 'Failed to orchestrate civil-ccd-definition branch'
      }
    }

    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${PREVIEW_SERVICE_NAME})
      ./bin/add-roles.sh
      ./bin/import-ccd-definition.sh
      ./bin/import-bpmn-diagram.sh .
    """
    env.URL="https://xui-${PREVIEW_SERVICE_NAME}.service.core-compute-preview.internal"
    env.CIVIL_SERVICE_URL="http://${PREVIEW_SERVICE_NAME}.service.core-compute-preview.internal"
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:preview') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "http://ccd-data-store-api-${PREVIEW_SERVICE_NAME}.service.core-compute-preview.internal"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="http://${PREVIEW_SERVICE_NAME}.service.core-compute-preview.internal"
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:aat') {
    sh """
      eval \$(./bin/variables/load-staging-environment-variables.sh)
      ./bin/add-roles.sh
      ./bin/import-ccd-definition.sh
      ./bin/pull-latest-release-asset.sh civil-camunda-bpmn-definition civil-camunda-bpmn-definition.zip
      ./bin/import-bpmn-diagram.sh .
    """
    env.URL="https://civil-ccd-xui-staging.aat.platform.hmcts.net"
    env.CIVIL_SERVICE_URL="http://civil-ccd-staging.service.core-compute-aat.internal"
    archiveCoreCaseDataDefinitions('staging')
    uploadCoreCaseDataDefinitions('staging')
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:aat') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "http://civil-ccd-data-store-staging-aat.service.core-compute-aat.internal"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="http://civil-ccd-staging.service.core-compute-aat.internal"
  }

  after('functionalTest:aat') {
    archiveCoreCaseDataDefinitions('aat')
    createGithubRelease()
    uploadCoreCaseDataDefinitions('aat')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
